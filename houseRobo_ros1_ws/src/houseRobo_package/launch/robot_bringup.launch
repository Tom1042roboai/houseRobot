<launch>
  <!-- Node listens to shutdown command from remote laptop -->
  <node pkg="houseRobo_package" type="shutdown_listener.py" name="shutdown_listener" output="screen"/>

  <!-- Load robot description from URDF -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find houseRobo_package)/urdf/simple_houseRobo.urdf'" />

  <!-- Publish TFs from URDF -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />

  <!-- Optionally publish joint states -->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" />

  <!-- Sensor drivers (example: LIDAR, IMU, encoders) -->
  <!-- Replace this with your actual sensor drivers -->
  <include file="$(find rplidar_ros)/launch/rplidar.launch" />

  <!-- SLAM (e.g., GMapping) -->
  <include file="$(find houseRobo_package)/launch/slam.launch" />

  <!-- Move Base (Navigation stack) -->
  <include file="$(find houseRobo_package)/launch/move_base.launch" />

  <!-- Frontier-based exploration -->
  <include file="$(find explore_lite)/launch/explore_costmap.launch" />

  <!-- ROS Serial (Arduino) -->
  <!-- Set respawn for if arduino resets-->
  <node pkg="rosserial_arduino" type="serial_node.py" name="rosserial_node" respawn="true">
    <param name="port" value="/dev/ttyACM0" />
    <param name="baud" value="57600" />
  </node>

  <!-- Node publishes theoretical values of odom for odom->base_link TF -->
  <node pkg="houseRobo_package" type="odom_node" name="odom_node" output="screen"/>

  <!-- Optional: RViz -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find houseRobo_package)/rviz/default.rviz" /> -->
</launch>
